# Optimized GitHub Release Workflow
# Publishes to GitHub Packages and GitHub Releases with improved performance and reliability
#
# This workflow is completely independent from Maven Central publishing.
# It creates GitHub Releases and publishes to GitHub Packages.
# Maven Central publishing is handled by a separate workflow (maven-central.yml).

name: GitHub Release

on:
  # Only trigger on PR merges to main (not direct pushes)
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch: # Allow manual trigger

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    # Only run if PR was merged and not a Maven release plugin commit
    if: ${{ github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '[maven-release-plugin]') }}
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      tag: ${{ steps.extract_version.outputs.tag }}
      skip_release: ${{ steps.check_release.outputs.skip_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libxkbcommon-x11-0 xvfb

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Check if release already exists
        id: check_release
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"
          
          # For SNAPSHOT versions, check if the release version (without -SNAPSHOT) already has a tag
          if [[ "$CURRENT_VERSION" == *"-SNAPSHOT" ]]; then
            RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
            echo "SNAPSHOT version detected, checking for release tag: v${RELEASE_VERSION}"
            if git tag -l | grep -q "^v${RELEASE_VERSION}$"; then
              echo "Release v${RELEASE_VERSION} already exists, skipping release process"
              echo "skip_release=true" >> $GITHUB_OUTPUT
            else
              echo "Release v${RELEASE_VERSION} does not exist, proceeding with release"
              echo "skip_release=false" >> $GITHUB_OUTPUT
            fi
          else
            # For non-SNAPSHOT versions, check for exact version tag
            echo "Release version detected, checking for exact tag: v${CURRENT_VERSION}"
            if git tag -l | grep -q "^v${CURRENT_VERSION}$"; then
              echo "Release v${CURRENT_VERSION} already exists, skipping release process"
              echo "skip_release=true" >> $GITHUB_OUTPUT
            else
              echo "Release v${CURRENT_VERSION} does not exist, proceeding with release"
              echo "skip_release=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Log release skip
        if: steps.check_release.outputs.skip_release == 'true'
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "✅ Release v${CURRENT_VERSION} already exists and is published"
          echo "🏷️  Git tag v${CURRENT_VERSION} found"
          echo "⏭️  Skipping release process to avoid conflicts"
          echo "📦 No new artifacts to publish"

      - name: Create GitHub Release for existing tag
        if: steps.check_release.outputs.skip_release == 'true'
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          TAG="v${CURRENT_VERSION}"
          
          # Check if GitHub Release already exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "📋 GitHub Release $TAG already exists"
          else
            echo "🆕 Creating GitHub Release for existing tag $TAG"
            
            # Build the project to get artifacts
            mvn -B clean package -DskipTests=true -Dmaven.javadoc.skip=true
            
            # Create distribution packages
            mkdir -p release-package/{lib,plugins,bin,docs}
            
            # Copy main application jar
            cp target/fun-project.jar release-package/
            
            # Copy dependencies  
            cp -r target/lib/* release-package/lib/ 2>/dev/null || :
            
            # Copy plugin jars
            cp -r target/plugins/* release-package/plugins/ 2>/dev/null || :
            
            # Copy start scripts
            cp start.sh release-package/bin/ 2>/dev/null || :
            cp start.cmd release-package/bin/ 2>/dev/null || :
            
            # Copy documentation
            cp README.md release-package/docs/ 2>/dev/null || :
            cp LICENSE release-package/docs/ 2>/dev/null || :
            
            # Create distribution archives
            cd release-package
            zip -r ../fun-project-${CURRENT_VERSION}-distribution.zip . -q
            tar -czf ../fun-project-${CURRENT_VERSION}-distribution.tar.gz .
            cd ..
            
            # Create checksums
            sha256sum fun-project-${CURRENT_VERSION}-distribution.zip > fun-project-${CURRENT_VERSION}-distribution.zip.sha256
            sha256sum fun-project-${CURRENT_VERSION}-distribution.tar.gz > fun-project-${CURRENT_VERSION}-distribution.tar.gz.sha256
            sha256sum target/fun-project.jar > fun-project-${CURRENT_VERSION}.jar.sha256
            
            # Create release notes
            cat > release_notes.md << EOF
          ## Release $CURRENT_VERSION
          
          This release was created from an existing git tag.
          
          ### Key Features
          - Java-based mouse movement utility with plugin architecture
          - Dynamic plugin loading system
          - Configurable timer with end-time specification
          - Global hotkey support
          - Cross-platform compatibility
          
          ### Downloads
          - **fun-project.jar**: Main application JAR file
          - **fun-project-${CURRENT_VERSION}-distribution.zip**: Complete distribution package (Windows)
          - **fun-project-${CURRENT_VERSION}-distribution.tar.gz**: Complete distribution package (Unix/Linux)
          - **SHA256 files**: Checksums for all packages
          
          **Full Changelog**: https://github.com/aldrineeinsteen/fun-project/releases
          EOF
            
            # Create the GitHub Release with all distribution files
            gh release create "$TAG" \
              --title "Release $CURRENT_VERSION" \
              --notes-file release_notes.md \
              --latest \
              target/fun-project.jar \
              fun-project-${CURRENT_VERSION}-distribution.zip \
              fun-project-${CURRENT_VERSION}-distribution.tar.gz \
              fun-project-${CURRENT_VERSION}.jar.sha256 \
              fun-project-${CURRENT_VERSION}-distribution.zip.sha256 \
              fun-project-${CURRENT_VERSION}-distribution.tar.gz.sha256
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Maven release prepare
        if: steps.check_release.outputs.skip_release == 'false'
        run: |
          xvfb-run -a mvn release:prepare -s settings.xml \
            -Darguments="-Dmaven.javadoc.skip=true -Dmaven.test.skip=true" \
            -DskipTests=true \
            -Dmaven.javadoc.skip=true \
            -B
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Extract version information
        if: steps.check_release.outputs.skip_release == 'false'
        id: extract_version
        run: |
          TAG=$(grep 'scm.tag=' release.properties | cut -d= -f2)
          VERSION=$(grep 'project.rel.' release.properties | head -1 | cut -d= -f2)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release tag: $TAG"
          echo "Release version: $VERSION"

      - name: Upload release artifacts
        if: steps.check_release.outputs.skip_release == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            release.properties
            pom.xml.releaseBackup
          retention-days: 1
  perform:
    name: Perform Release
    needs: [ prepare ]
    if: needs.prepare.outputs.skip_release == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libxkbcommon-x11-0 xvfb zip

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Maven release perform
        run: |
          xvfb-run -a mvn release:perform -s settings.xml \
            -Darguments="-Dmaven.javadoc.skip=true -Dmaven.test.skip=true" \
            -DskipTests=true \
            -Dmaven.javadoc.skip=true \
            -B
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Create distribution packages
        run: |
          cd target/checkout
          
          # Create structured release package
          mkdir -p release-package/{lib,plugins,bin,docs}
          
          # Copy main application jar
          cp target/fun-project.jar release-package/
          
          # Copy dependencies
          cp -r target/lib/* release-package/lib/ 2>/dev/null || :
          
          # Copy plugin jars
          cp -r target/plugins/* release-package/plugins/ 2>/dev/null || :
          
          # Copy start scripts
          cp ../../start.sh release-package/bin/ 2>/dev/null || :
          cp ../../start.cmd release-package/bin/ 2>/dev/null || :
          
          # Copy documentation
          cp ../../README.md release-package/docs/ 2>/dev/null || :
          cp ../../LICENSE release-package/docs/ 2>/dev/null || :
          
          # Create distribution archives
          cd release-package
          
          # Create ZIP for Windows users
          zip -r ../fun-project-${{ needs.prepare.outputs.version }}-distribution.zip . -q
          
          # Create TAR.GZ for Unix users
          tar -czf ../fun-project-${{ needs.prepare.outputs.version }}-distribution.tar.gz .
          
          cd ..
          
          # Create checksums
          sha256sum fun-project-${{ needs.prepare.outputs.version }}-distribution.zip > fun-project-${{ needs.prepare.outputs.version }}-distribution.zip.sha256
          sha256sum fun-project-${{ needs.prepare.outputs.version }}-distribution.tar.gz > fun-project-${{ needs.prepare.outputs.version }}-distribution.tar.gz.sha256
          sha256sum target/fun-project.jar > fun-project-${{ needs.prepare.outputs.version }}.jar.sha256

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## Fun Project Release ${{ needs.prepare.outputs.version }}
          
          ### What's Changed
          - Java 21 LTS support
          - Updated dependencies for enhanced security and performance
          - Improved cross-platform start scripts with GitHub Releases integration
          - Enhanced GitHub Actions CI/CD pipeline
          
          ### Distribution Files
          - `fun-project.jar` - Main application JAR
          - `fun-project-${{ needs.prepare.outputs.version }}-distribution.zip` - Complete distribution (Windows)
          - `fun-project-${{ needs.prepare.outputs.version }}-distribution.tar.gz` - Complete distribution (Unix/Linux)
          - `*.sha256` files - Checksums for integrity verification
          
          ### System Requirements
          - Java 21 or higher
          - Supported platforms: Windows, macOS, Linux
          
          ### Quick Start
          ```bash
          # Download and extract the distribution package
          # Run with: java -cp "lib/*:plugins/*:fun-project.jar" com.aldrineeinsteen.fun.Main
          # Or use the provided start scripts in the bin/ directory
          ```
          
          **Full Changelog**: https://github.com/aldrineeinsteen/fun-project/compare/v1.2.8...${{ needs.prepare.outputs.tag }}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: "Release ${{ needs.prepare.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          make_latest: true
          files: |
            target/checkout/target/fun-project.jar
            target/checkout/fun-project-${{ needs.prepare.outputs.version }}-distribution.zip
            target/checkout/fun-project-${{ needs.prepare.outputs.version }}-distribution.tar.gz
            target/checkout/fun-project-${{ needs.prepare.outputs.version }}.jar.sha256
            target/checkout/fun-project-${{ needs.prepare.outputs.version }}-distribution.zip.sha256
            target/checkout/fun-project-${{ needs.prepare.outputs.version }}-distribution.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}